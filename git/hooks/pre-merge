#!/bin/bash
# pre-merge hook with confirmation + fail-safe restore
# Auto stage + commit TEST_LOG.md before merge

LOGFILE="TEST_LOG.md"
BACKUPFILE="TEST_LOG.backup"
TIMESTAMP=$(date "+%Y-%m-%d %H:%M:%S")

echo "⚠️ You are about to auto-update $LOGFILE before merge."
read -p "Are you sure? (y/n): " CONFIRM

if [[ "$CONFIRM" == "y" || "$CONFIRM" == "Y" ]]; then
    # Backup TEST_LOG.md
    cp "$LOGFILE" "$BACKUPFILE"

    # Append log entry
    echo "- [AutoLog] Pre-merge update at $TIMESTAMP" >> "$LOGFILE"
    git add "$LOGFILE"

    # Commit
    if git commit -m "AutoLog: Pre-merge update at $TIMESTAMP"; then
        echo "✅ TEST_LOG.md updated and committed (pre-merge)."
    else
        echo "❌ Commit failed, restoring $LOGFILE..."
        mv "$BACKUPFILE" "$LOGFILE"
        git reset HEAD "$LOGFILE"
        exit 1
    fi

    # Remove backup after success
    rm -f "$BACKUPFILE"
else
    echo "❌ Pre-merge auto-log aborted by user."
    exit 1
fi

#!/bin/bash
# pre-merge hook with confirmation step
# Auto stage + commit TEST_LOG.md before merge

LOGFILE="TEST_LOG.md"
TIMESTAMP=$(date "+%Y-%m-%d %H:%M:%S")

echo "⚠️ You are about to auto-update $LOGFILE before merge."
read -p "Are you sure? (y/n): " CONFIRM

if [[ "$CONFIRM" == "y" || "$CONFIRM" == "Y" ]]; then
    echo "- [AutoLog] Pre-merge update at $TIMESTAMP" >> "$LOGFILE"
    git add "$LOGFILE"
    git commit -m "AutoLog: Pre-merge update at $TIMESTAMP"
    echo "✅ TEST_LOG.md updated and committed (pre-merge)."
else
    echo "❌ Pre-merge auto-log aborted by user."
    exit 1
fi

#!/bin/bash
# pre-merge.sh
# Auto stage + commit TEST_LOG.md before merge

LOGFILE="TEST_LOG.md"
TIMESTAMP=$(date "+%Y-%m-%d %H:%M:%S")

echo "- [AutoLog] Pre-merge update at $TIMESTAMP" >> "$LOGFILE"
git add "$LOGFILE"
git commit -m "AutoLog: Pre-merge update at $TIMESTAMP"

echo "✅ TEST_LOG.md updated and committed (pre-merge)."

#!/bin/bash
# pre-merge.sh
# Ensures TEST_LOG.md is updated, staged, and auto-committed before merge

LOGFILE="TEST_LOG.md"
TIMESTAMP=$(date "+%Y-%m-%d %H:%M:%S")

# Step 1: Append entry to TEST_LOG.md
echo "- [AutoLog] Pre-merge update at $TIMESTAMP" >> "$LOGFILE"

# Step 2: Stage TEST_LOG.md
git add "$LOGFILE"

# Step 3: Commit automatically
git commit -m "AutoLog: Pre-merge update at $TIMESTAMP"

echo "✅ TEST_LOG.md updated and committed automatically."

git commit -m "AutoLog: Merge log update"

#!/bin/bash
# pre-merge.sh - Auto stage and log during merges with branch info + safety checks

set -e  # exit immediately if a command fails

# Ensure TEST_LOG.md exists
if [ ! -f TEST_LOG.md ]; then
  echo "❌ TEST_LOG.md missing. Aborting merge."
  exit 1
fi

# Get branch info
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
MERGE_BRANCH=$1  # git passes the merge branch name as an argument if available

# Stage all changes
git add -A

# Append merge info to TEST_LOG.md
if [ -n "$MERGE_BRANCH" ]; then
  echo -e "\n[AutoMerge] $(date '+%Y-%m-%d %H:%M:%S') - Merging branch '$MERGE_BRANCH' into '$CURRENT_BRANCH'" >> TEST_LOG.md
else
  echo -e "\n[AutoMerge] $(date '+%Y-%m-%d %H:%M:%S') - Merge initiated on '$CURRENT_BRANCH'" >> TEST_LOG.md
fi

# Show staged changes
git status --short

echo "✅ Auto-staging and logging done. Proceeding with merge."
exit 0

#!/bin/bash
# pre-merge.sh - Auto stage and log during merges with branch info + safety checks

set -e  # exit immediately if a command fails

# Ensure TEST_LOG.md exists
if [ ! -f TEST_LOG.md ]; then
  echo "❌ TEST_LOG.md missing. Aborting merge."
  exit 1
fi

# Get branch info
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
MERGE_BRANCH=$1  # git passes the merge branch name as an argument if available

# Stage all changes
git add -A

# Append merge info to TEST_LOG.md
if [ -n "$MERGE_BRANCH" ]; then
  echo -e "\n[AutoMerge] $(date '+%Y-%m-%d %H:%M:%S') - Merging branch '$MERGE_BRANCH' into '$CURRENT_BRANCH'" >> TEST_LOG.md
else
  echo -e "\n[AutoMerge] $(date '+%Y-%m-%d %H:%M:%S') - Merge initiated on '$CURRENT_BRANCH'" >> TEST_LOG.md
fi

# Show staged changes
git status --short

echo "✅ Auto-staging and logging done. Proceeding with merge."
exit 0

ln -sf /pre-merge.sh .git/hooks/pre-merge

#!/bin/bash
# pre-merge.sh - Auto stage and log during merges with safety checks

set -e  # exit immediately if a command fails

# Ensure TEST_LOG.md exists
if [ ! -f TEST_LOG.md ]; then
  echo "❌ TEST_LOG.md missing. Aborting merge."
  exit 1
fi

# Stage all changes
git add -A

# Append merge info to TEST_LOG.md
echo -e "\n[AutoMerge] $(date '+%Y-%m-%d %H:%M:%S') - Merge initiated" >> TEST_LOG.md

# Show staged changes
git status --short

echo "✅ Auto-staging and logging done. Proceeding with merge."
exit 0
