#!/bin/bash
# Master Generator Script for QuantumTrader-AI
# Backend-only mode + verification tool

set -e

REPO_DIR="$(cd "$(dirname "$0")/../.." && pwd)"
cd "$REPO_DIR"

show_help() {
  echo "Usage: $0 [--generate | --verify]"
  echo
  echo "Options:"
  echo "  --generate   Run all module generation tasks (Modules 1–15) + verify sync."
  echo "  --verify     Verify if local branch is in sync with GitHub."
  echo "  --help       Show this message."
}

generate_modules() {
  echo "⚙️  Running module generation (Modules 1–15)..."
  # Placeholder for your 15 module scripts
  for i in {1..15}; do
    echo "  → Generating Module $i..."
    # ./repo2/modules/module$i.sh  # when module scripts are ready
  done
  echo "✅ Generation complete."

  # Run sync verification after generation
  verify_sync
}

verify_sync() {
  echo "🔍 Verifying sync with GitHub (origin/main)..."
  git fetch origin
  if git log HEAD..origin/main --oneline | grep .; then
    echo "⚠️  Local branch is BEHIND origin/main. Please pull latest."
  elif git log origin/main..HEAD --oneline | grep .; then
    echo "⚠️  Local branch is AHEAD of origin/main. Please push changes."
  else
    echo "✅ Local and origin/main are in perfect sync."
  fi
}

case "$1" in
  --generate) generate_modules ;;
  --verify) verify_sync ;;
  --help|"") show_help ;;
  *) echo "❌ Unknown option: $1"; show_help; exit 1 ;;
esac

#!/bin/bash
# ======================================
# Quantum Trader AI - Master Generator Script
# Enhanced version with monitoring, logging & archiving
# ======================================

LOG_DIR="logs"
ARCHIVE_DIR="$LOG_DIR/archives"
mkdir -p "$ARCHIVE_DIR"

# --------------------------------------
# Archive function (12-hourly snapshots)
# --------------------------------------
archive_logs() {
  timestamp=$(date +"%Y%m%d_%H%M%S")
  archive_file="$ARCHIVE_DIR/archive_$timestamp.tar.gz"
  tar -czf "$archive_file" "$LOG_DIR"/*.log 2>/dev/null
  echo "[ARCHIVE] Logs archived at $archive_file"
}

# --------------------------------------
# Improved Archive Listing
# --------------------------------------
list_archives() {
  echo "======================================"
  echo "  QT AI Master Generator Archives"
  echo "======================================"
  echo ""
  
  if [ ! -d "$ARCHIVE_DIR" ]; then
    echo "No archives directory found yet."
    return
  fi

  echo "Available archives in $ARCHIVE_DIR:"
  echo ""

  # Nicely formatted list: Date | Size | Filename
  ls -lh --time-style=long-iso "$ARCHIVE_DIR" | awk 'NR>1 {print $6, $7, " | ", $5, " | ", $9}'

  echo ""
  echo "Legend:"
  echo "  Date & Time | Size | Filename"
  echo "======================================"
}

# --------------------------------------
# Monitor logins & echo commands
# --------------------------------------
monitor_activity() {
  echo "[MONITOR] Monitoring user logins and commands..."
  last -a | head -n 5

  echo ""
  echo "[MONITOR] Recent commands executed:"
  history | tail -n 10
}

# --------------------------------------
# Main generator loop
# --------------------------------------
generate_all_modules() {
  echo "[START] Master Generator Script Running..."
  
  # Example of generating a module
  echo "[GEN] Creating modules..."
  echo "Module created at $(date)" >> "$LOG_DIR/module_gen.log"
  
  # Trigger archive every 12 hours (placeholder)
  # In practice, you might use cron to schedule this
  current_hour=$(date +"%H")
  if (( current_hour % 12 == 0 )); then
    archive_logs
  fi
}

# --------------------------------------
# Command-line options
# --------------------------------------
case "$1" in
  --run)
    generate_all_modules
    ;;
  --monitor)
    monitor_activity
    ;;
  --archives)
    list_archives
    ;;
  --help|*)
    echo "Usage: $0 [--run | --monitor | --archives]"
    ;;
esac
