 #!/bin/bash
set -e

# --- Logging & setup ---
LOG_DIR="$(dirname "$0")/../logs"
mkdir -p "$LOG_DIR"
LOG_FILE="$LOG_DIR/generate_all_modules_$(date +'%Y%m%d_%H%M%S').log"
exec > >(tee -a "$LOG_FILE") 2>&1

BACKUP_DIR="$(dirname "$0")/../backups"
mkdir -p "$BACKUP_DIR"

# --- Functions ---
generate_module() {
    local module=$1
    local target="modules/module_${module}.py"

    echo "‚öôÔ∏è Generating Module $module..."

    # Backup existing file if present
    if [[ -f "$target" ]]; then
        cp "$target" "$BACKUP_DIR/module_${module}_$(date +'%Y%m%d_%H%M%S').py"
        echo "üóÇÔ∏è Backed up existing $target"
    fi

    # Example generation logic (placeholder)
    echo "# Auto-generated Module $module" > "$target"
    echo "print('Module $module initialized')" >> "$target"

    if [[ $? -ne 0 ]]; then
        echo "‚ùå Failed to generate Module $module"
        return 1
    else
        echo "‚úÖ Module $module generated successfully"
        return 0
    fi
}

# --- Argument parsing ---
if [[ $# -eq 1 && "$1" =~ ^[0-9]+$ ]]; then
    # Selective generation
    generate_module "$1" || exit 1
    exit 0
fi

# --- Full generation ---
echo "üöÄ Starting full module generation cycle"

for module in {01..15}; do
    generate_module "$module" || {
        echo "‚ö†Ô∏è Skipping Module $module due to error"
        continue
    }
done

echo "‚úÖ Full module generation cycle complete"
